version: '3.8'

services:
  # Next.js Application
  liquor-store:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: liquor-aramac-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_CONVEX_URL=${NEXT_PUBLIC_CONVEX_URL}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      - NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - liquor-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.liquor.rule=Host(`liquor.aramac.dev`)"
      - "traefik.http.routers.liquor.entrypoints=websecure"
      - "traefik.http.routers.liquor.tls.certresolver=letsencrypt"
      - "traefik.http.services.liquor.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.liquor-rate-limit.ratelimit.burst=100"
      - "traefik.http.middlewares.liquor-rate-limit.ratelimit.average=50"
      - "traefik.http.routers.liquor.middlewares=liquor-rate-limit"

  # Redis for caching and sessions
  redis:
    image: redis:7.2-alpine
    container_name: liquor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - liquor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for additional data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: liquor-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=liquor_store
      - POSTGRES_USER=liquor_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - liquor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U liquor_user -d liquor_store"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx for static file serving and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: liquor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - liquor-store
    networks:
      - liquor-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`www.liquor.aramac.dev`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: liquor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - liquor-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: liquor-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - liquor-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  liquor-network:
    driver: bridge